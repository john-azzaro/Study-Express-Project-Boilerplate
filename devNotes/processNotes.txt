Process Notes for Express Project Boilerplate
=============================================




About Process Notes
===================
"Process Notes" is a step-by-step workflow document that outlines the "phases" of my study/app development and the successive steps taken at each
milestone of the examination. In the case of studies, the process notes might be eschewed in favor of the main Readme document in the repository, 
mostly because of the advantage in formatting and accessibility. However, I will put additional notes and resource links that might be helpful. In 
the case of application development, groups of related steps are combined into "phase" modules so that they can be reorganized and refined in 
post-review. This has proven to be EXTREMELY helpful in learning (i.e. Feynman technique (https://fs.blog/2012/04/feynman-technique/)) and refining 
workflow so I can improve my process in future projects. It also has come in handy for some tricky bug fixes not only for past projects, but this 
one as well so I would urge you to consider at least doing a rough summary for your own benefit.



Objective of Study
==================





Process
=======

Phase 1: Project Setup
=========================================================================================
-- Setting up your project lays the foundation for the rest fo the project. The initial 
   steps involve installing npm, dependencies, development environment setup, and 
   creating custom scripts to run the application in certain environments.
=========================================================================================

/// Project Setup:                           
        1:  Issue-Index-App                                        -- Create a folder to store you application.
        2:  npm init                                               -- Create a package.json file to start the project off.

/// Install express:
        3:  npm install express                                    -- Install express.
        4:  .gitignore > node_modules                              -- Tell git to ignore node_modules folder.

/// Install initial dependencies:                
        5:  npm install morgan cors dotenv helmet                  -- Install initial production enviroment.

/// Install initial development environment:
        6:  npm install --save-dev nodemon mocha chai supertest    -- Install initial development environment.

/// Create custom "start" and "devStart" scripts in package.json:
      7.1:  "devStart": "nodemon server.js"                        -- Run development environment with nodemon for application refresh.
      7.2:  "start": "node src/server.js"                          -- Run production environment.
      7.3:  "test": "mocha"                                        -- Run Mocha tests.




Phase 2: Create Express application
==========================================================================================
-- 
==========================================================================================

/// Create an "src" directory:
        1:  src                                                    -- Server code will be held in this src directory.

/// Create and setup "app.js" file:
      2.1:  -----------------------------------------------------------------------
          src  >  app.js
      -----------------------------------------------------------------------------
      
      2.2:  -----------------------------------------------------------------------
          require('dotenv').config()                                              
          const express = require('express')
          const morgan = require('morgan')
          const cors = require('cors')
          const helmet = require('helmet')

          const app = express()

          const morganOption = (process.env.NODE_ENV === 'production')
            ? 'tiny'
            : 'common';

          app.use(morgan(morganOption))
          app.use(helmet())
          app.use(cors())

          app.get('/', (req, res) => {                                              // add initial GET route to test.
            res.send('Hello, world!');
          });

          module.exports = app;
       --------------------------------------------------------------------------

/// Create a "server.js" file:
      3: -----------------------------------------------------------------------
          const app = require('./app');

          const PORT = process.env.PORT || 8000

          app.listen(PORT, () => {
            console.log(`Server listening at http://localhost:${PORT}`)
          });
        --------------------------------------------------------------------------




Phase 3: Setup testing environment:
===========================================================================================
-- 
===========================================================================================

/// Create a "test" folder for integration testing:
    1:  --------------------------------------------------------------------------
        test
      ----------------------------------------------------------------------------

/// Create test file for app.js:
    2:  --------------------------------------------------------------------------
        test  >  app.spec.js
      ----------------------------------------------------------------------------

/// Create Initial test for app.js:
    3.  --------------------------------------------------------------------------
        const { expect } = require('chai')
        const supertest = require('supertest')
        const app = require('../src/app')

        describe('App', () => {
          it('GET / responds with 200 containing "Hello, world!"', () => {
            return supertest(app)
              .get('/')
              .expect(200, 'Hello, world!')
          })
        })
    ------------------------------------------------------------------------------

/// Try "npm test" to check if everything is working in GitBash!
    4:  --------------------------------------------------------------------------
        npm test
      ----------------------------------------------------------------------------
          * You should see a passing test in the console:
            ------------------------------------------------------------
              âˆš GET / responds with 200 containing "Hello, world!"
              1 passing (31ms)
            ------------------------------------------------------------

/// For Multiple test files, require test.js file:
    * In your package.json file, amend the test script to specify the following setupfile.
    5:  --------------------------------------------------------------------------
       "test": "mocha --require test/setup.js",
    ------------------------------------------------------------------------------

/// To run tests, run "npm test -- --watch":
    6:  --------------------------------------------------------------------------
        npm test -- --watch
    ------------------------------------------------------------------------------




Phase 4: Add Error-handling middleware:
================================================================================================
-- Adding this error-handling middleware should hide error messages from users and other parties.
================================================================================================
    1:  ----------------------------------------------------------------------------------
        require("dotenv").config();
        const express = require("express");
        const morgan = require("morgan");
        const cors = require("cors");
        const helmet = require("helmet");

        const app = express();

        const morganOption = process.env.NODE_ENV === "production" ? "tiny" : "common";

        app.use(morgan(morganOption));
        app.use(helmet());
        app.use(cors());

        app.get("/", (req, res) => {
          res.send("Hello, world!");
        });

        app.use(function errorHandler(error, req, res, next) {                                // error handling middleware.
          let response;
          if (process.env.NODE_ENV === "production") {
            response = { error: { message: "server error" } };
          } else {
            console.error(error);
            response = { message: error.message, error };
          }
          res.status(500).json(response);
        });

        module.exports = app;

    ---------------------------------------------------------------------------------------



Phase 5: Setup environment variables:
=================================================================================================
-- Environment variable can help us protect sensitive information within our program.
=================================================================================================

/// Create a new.env file named "example.env" and copy the contents of your .env into this one:
  * Note that your current .env file is being ignored, so this one isnt being ignored because
    it does not have anything sensitive in it.
    1.  ------------------------------------------------------------------------------------
        example.env
    ----------------------------------------------------------------------------------------
    
/// Insert the content into example.env as follows:
    2:  ------------------------------------------------------------------------------------
        NODE_ENV=development
        PORT=8000
        EXAMPLE="example-environmental-variable"
    ----------------------------------------------------------------------------------------

/// Create a file called "config.js" to keep track of the values and set defaults:
    3.  ------------------------------------------------------------------------------------
        config.js
    ----------------------------------------------------------------------------------------

/// Add the following defaults to config.js:
    4.  ------------------------------------------------------------------------------------
        module.exports = {
          PORT: process.env.PORT || 8000,
          NODE_ENV: process.env.NODE_ENV || 'development',
        }
    ----------------------------------------------------------------------------------------

/// Now refactor server.js to use the config.js file:
    5.  ------------------------------------------------------------------------------------
        const app = require('./app');

        const { PORT } = require('./config');                                                 // Port impoted from config.js file.

        app.listen(PORT, () => {
          console.log(`Server listening at http://localhost:${PORT}`)
        });
    ----------------------------------------------------------------------------------------

/// And refactor app.js to use the config.js file:
    6.  ------------------------------------------------------------------------------------
        require("dotenv").config();
        const express = require("express");
        const morgan = require("morgan");
        const cors = require("cors");
        const helmet = require("helmet");
        const { NODE_ENV } = require('./config')                                            // import config.js as NODE_ENV.

        const app = express();

        const morganOption = (NODE_ENV === 'production') ? "tiny" : "common";               // If NODE_ENV is in the production environment, then...

        app.use(morgan(morganOption));
        app.use(helmet());
        app.use(cors());

        app.get("/", (req, res) => {
          res.send("Hello, world!");
        });

        app.use(function errorHandler(error, req, res, next) {
          let response;
          if (NODE_ENV === 'production') {                                                   // If NODE_ENV is in the production environment, then...
            response = { error: { message: "server error" } };
          } else {
            console.error(error);
            response = { message: error.message, error };
          }
          res.status(500).json(response);
        });

        module.exports = app;
    ----------------------------------------------------------------------------------------




Phase 6: Setup for Heroku:
==============================================================================================
-- 
==============================================================================================

/// Create a Procfile in your root directory:
    1.  -----------------------------------------------------------------------------------
          Procfile
    ---------------------------------------------------------------------------------------

/// Inside Procfile, insert the following:
    2.  -----------------------------------------------------------------------------------
          web: node src/server.js
    ---------------------------------------------------------------------------------------

/// Insert Scripts for deployment to Heroku in package.json:
    3.  -----------------------------------------------------------------------------------
          "scripts": {
            "test": "mocha --require test/setup.js",
            "devStart": "nodemon src/server.js",
            "start": "node src/server.js",
            "start": "node src/server.js",
            "predeploy": "npm audit",
            "deploy": "git push heroku master"
          },
    ---------------------------------------------------------------------------------------

    